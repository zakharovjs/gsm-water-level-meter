;=============================================================================
;Процедуры для общения через программный COM-порт USART2 (до 4800 бод)
;=============================================================================

;Аппаратное подключение USART2: две произвольные ножки U2_RX и U2_TX, способ задания см. ниже.

;Программное подключение модуля:
;1. До подключения модуля описать следующие переменные для аппартного подключения USART2:
;   #define	U2_RX		PORTB,5		;Вход для приёма по USART2
;   #define	U2_TX		PORTB,4		;Выход для передачи по USART2
;2. В удобном месте программы вставить один из макросов U2_Procedures, U2_Procedures_T и U2_Procedures_R.
;3. Настроить U2_RX и U2_TX как цифровые выводы (не выводы АЦП и прочей периферии),
;   U2_RX настроить как вход, а U2_TX - как выход (по возможности предварительно установив U2_TX=1).
;4. В начале работы вызвать процедуру Serial2Setup.
;5. Организовать прерывание каждые XX мкс, в котором с фиксированным по времени смещением от входа в прерывание
;   вставить либо один из макросов U2_Intr_Fast и U2_Intr_Fixed (и передача, и приём), либо один из макросов
;   U2_Intr_T_Fast и U2_Intr_R (только передача или только приём). Значения XX для разных скоростей обмена:
;	4800 бод:	69.0 мкс (69 тактов при частоте 1 МГц)
;	2400 бод:	138.0 мкс (138 тактов при частоте 1 МГц)

;===== КОНСТАНТЫ И ПЕРЕМЕННЫЕ ================================================

;Переменные
		CBLOCK
		  ;Переменные прерывания
		  USART2_Status:	1	;Бит статуса приёмника/передатчика USART2
		  USART2_T4800:		1	;Счётчик деления частоты на 3 для передачи
		  USART2_TCount:	1	;Счётчик передачи битов USART2
		  USART2_TData:		1	;Передаваемый байт USART2
		  USART2_R4800:		1	;Счётчик деления частоты на 3 для приёма
		  USART2_RCount:	1	;Счётчик приёма битов USART2
		  USART2_RData:		1	;Принимаемый байт USART2
		  RcChar2:		1	;Принятый новый байт
		ENDC

;Флаги переменной USART2_Status
#define		U2_IsTransmit	USART2_Status,0		;Идёт передача
#define		U2_IsTStartBit	USART2_Status,1		;Будет передача стартового бита
#define		U2_IsReceive	USART2_Status,2		;Идёт приём
#define		U2_IsRStartBit	USART2_Status,3		;Будет приём стартового бита
#define		U2_IsNewRcChar	USART2_Status,4		;Переменная RcChar2 содержит новый принятый байт

;===== ПРОЦЕДУРЫ И ФУНКЦИИ ===================================================

;Основные макрокоманды
#define		Serial2Setup	call	Serial2Setup_	;Инициализация работы USART2 (требует включенности Bank_0)
#define		Serial2Transmit	call	Serial2Tr_	;Передача байта из W (W не портит)
#define		Serial2Receive	call	Serial2Rec_	;Приём байта в W и RcChar2 с ожиданием
;Процедуры приёма и передачи могут быть переопределены вызовом #undefine и повторным #define.
;Такое переопределение должно делаться после подключения модуля USART2.inc до первого (далее в тексте программы)
;вызова переопределяемой процедуры, в том числе до подключения модуля USART2hx.inc (если он используется)!

;***** ПЕРЕДАЧА *****

Serial2TransmitChar	MACRO	LL
			movlw	LL
			Serial2Transmit
			ENDM

Serial2TransmitPort	MACRO	Port
			mov_fw	Port
			Serial2Transmit
			ENDM

;***** ПРИЁМ *****

Serial2ReceivePort	MACRO	Port
			Serial2Receive
			movwf	Port
			ENDM

;===== БЛОК, КОТОРЫЙ ДОЛЖЕН БЫТЬ ВСТАВЛЕН В ПРОГРАММУ В УДОБНОМ МЕСТЕ ========

;Основные процедуры модуля USART2.inc. Вставляется один из макросов в зависимости от функций программы

;***** Функции приёма и передачи *****

U2_Procedures	MACRO

Serial2Setup_:	bsf	U2_TX			;Инициализация сигналов (требует включенности Bank_0)
		clrf	USART2_Status		;Сброс флагов
		bsf	U2_IsTStartBit		;В следующем байте первой пойдёт передача стартового бита
		mov_lwf	.1,USART2_T4800		;Передача может начинаться со следующего цикла
_USART2_nop4:	return

Serial2Tr_:	If_1	U2_IsTransmit		;Ожидание завершения передачи предыдущего байта
		  goto	Serial2Tr_
		movwf	USART2_TData		;Новый передаваемый байт
		bsf	U2_IsTransmit		;Старт передачи
		return

Serial2Rec_:	If_0	U2_IsNewRcChar		;Ожидание приёма байта
		  goto	Serial2Rec_
		mov_fw	RcChar2			;Загрузка принятых данных в W
		bcf	U2_IsNewRcChar		;Сброс флага наличия новых данных
		return

		ENDM

;***** Только Функции передачи (приём в программе не используется) *****

U2_Procedures_T	MACRO

Serial2Setup_:	bsf	U2_TX			;Инициализация сигналов (требует включенности Bank_0)
		clrf	USART2_Status		;Сброс флагов
		bsf	U2_IsTStartBit		;В следующем байте первой пойдёт передача стартового бита
		mov_lwf	.1,USART2_T4800		;Передача может начинаться со следующего цикла
_USART2_nop4:	return

Serial2Tr_:	If_1	U2_IsTransmit		;Ожидание завершения передачи предыдущего байта
		  goto	Serial2Tr_
		movwf	USART2_TData		;Новый передаваемый байт
		bsf	U2_IsTransmit		;Старт передачи
		return

		ENDM

;***** Только Функции приёма (передача в программе не используется) *****

U2_Procedures_R	MACRO

Serial2Setup_:	clrf	USART2_Status		;Сброс флагов
_USART2_nop4:	return

Serial2Rec_:	If_0	U2_IsNewRcChar		;Ожидание приёма байта
		  goto	Serial2Rec_
		mov_fw	RcChar2			;Загрузка принятых данных в W
		bcf	U2_IsNewRcChar		;Сброс флага наличия новых данных
		return

		ENDM

;===== БЛОКИ, КОТОРЫЕ ДОЛЖНЫ БЫТЬ ВСТАВЛЕНЫ В ПРЕРЫВАНИЕ =====================

;Все макросы требуют включенности Bank_0.

;***** Макросы передачи по USART2 *****

;Переменная длительность передачи => максимально возможное быстродействие
U2_Intr_T_Fast	MACRO
		;***** Передача данных по USART2 *****
		If_0	U2_IsTransmit		;Отправки нет - выход
		  goto	_U2T_Exit
		decfsz	USART2_T4800,ToF	;Деление частоты на 3 (и между битами, и между байтами)
		  goto	_U2T_Exit
		mov_lwf	0x03,USART2_T4800
		If_1	U2_IsTStartBit		;Стартовый бит => 0 на линию и выход
		  goto	_U2T_Send0
		decfsz	USART2_TCount,ToF	;Уменьшаем число оставшихся битов
		  goto	_U2T_Next		;Байт не кончился => к выдаче очередного бита
_U2T_Send1:	;Стоповый бит - перевод U2_TX в 1 (с подгоном момента) и выход
		bcf	U2_IsTransmit		;Передача завершена
		bsf	U2_IsTStartBit		;В следующем байте первой пойдёт передача стартового бита
		nop2
		bsf	U2_TX
		goto	_U2T_Exit
_U2T_Send0:	;Стартовый бит - перевод U2_TX в 0 (с подгоном момента) и выход
		bcf	U2_IsTStartBit		;Далее передача данных
		mov_lwf	.9,USART2_TCount	;Последует передача 9 бит (8 бит данных + стоповый)
		nop2
		bcf	U2_TX
		goto	_U2T_Exit
_U2T_Next:	;Отправка очередного бита
		rrf	USART2_TData,ToF	;Сдвиг данных, отправляемый бит => в C
		If_C
		  bsf	U2_TX
		If_NC				;Эта инструкция считается средним моментом передачи, к ней подгоняются _Send0 и _Send1
		  bcf	U2_TX
_U2T_Exit:	;Конец передачи данных по USART2
		ENDM

;Постоянная длительность передачи => корректный приём на любых скоростях
U2_Intr_T_Fixed	MACRO
		;***** Передача данных по USART2 *****
		If_0	U2_IsTransmit		;Отправки нет - выход
		  goto	_U2T_Exit3
		decfsz	USART2_T4800,ToF	;Деление частоты на 3 (и между битами, и между байтами)
_U2T_Exit3:	  goto	_U2T_Exit5
		mov_lwf	0x03,USART2_T4800
		If_1	U2_IsTStartBit		;Стартовый бит => 0 на линию и выход
		  goto	_U2T_Send0
		decfsz	USART2_TCount,ToF	;Уменьшаем число оставшихся битов
		  goto	_U2T_Next		;Байт не кончился => к выдаче очередного бита
_U2T_Send1:	;Стоповый бит - перевод U2_TX в 1 (с подгоном момента) и выход
		bcf	U2_IsTransmit		;Передача завершена
		bsf	U2_IsTStartBit		;В следующем байте первой пойдёт передача стартового бита
		nop2
		bsf	U2_TX
		goto	_U2T_Exit17
_U2T_Send0:	;Стартовый бит - перевод U2_TX в 0 (с подгоном момента) и выход
		bcf	U2_IsTStartBit		;Далее передача данных
		mov_lwf	.9,USART2_TCount	;Последует передача 9 бит (8 бит данных + стоповый)
		nop2
		bcf	U2_TX
_U2T_Exit15:	goto	_U2T_Exit17
_U2T_Exit5:	;Выход с задержкой в 12 тактов
		call	_USART2_nop4		;Подгон длительности до 17 тактов
		call	_USART2_nop4
		goto	_U2T_Exit15
_U2T_Next:	;Отправка очередного бита
		rrf	USART2_TData,ToF	;Сдвиг данных, отправляемый бит => в C
		If_C
		  bsf	U2_TX
		If_NC				;Эта инструкция считается средним моментом передачи, к ней подгоняются _Send0 и _Send1
		  bcf	U2_TX
		nop				;Подгон длительности до 17 тактов
_U2T_Exit17:	;Конец передачи данных по USART2
		ENDM

;***** Макрос приёма по USART2 *****

U2_Intr_R	MACRO
		;***** Приём данных по USART2 *****
		If_1	U2_IsReceive		;Приём идёт?
		  goto	_U2R_Priem
_U2R_Idle:	;Приёма ещё нет
		If_1	U2_RX			;Если линия в высоком состоянии, передача не началась
		  goto	_U2R_Exit
		mov_lwf	.1,USART2_R4800		;Приём стартового бита должен произойти в следующем такте
		bsf	U2_IsRStartBit		;Следующий принимаемый бит - стартовый
		bsf	U2_IsReceive		;Приём идёт
		goto	_U2R_Exit
_U2R_Priem:	;Приём уже идёт
		decfsz	USART2_R4800,ToF	;Деление частоты на 3
		  goto	_U2R_Exit
		mov_lwf	0x03,USART2_R4800
		If_1	U2_IsRStartBit		;Стартовый бит => приём нуля
		  goto	_U2R_Rec0
		decfsz	USART2_RCount,ToF	;Уменьшаем число оставшихся битов
		  goto	_U2R_Next		;Байт не кончился => к приёму очередного бита
_U2R_Rec1:	;Cтоповый бит - приём 1 и выход
		bcf	U2_IsReceive		;Приём завершён
		If_0	U2_RX			;Стоповый бит должен быть равен 1, если нет - игнорируем весь байт
		  goto	_U2R_Exit
		mov_fwf	USART2_RData,RcChar2	;Байт успешно принят
		bsf	U2_IsNewRcChar
		goto	_U2R_Exit
_U2R_Rec0:	;Стартовый бит - приём 0 и выход
		If_1	U2_RX			;Стартовый бит должен быть равен 0, если нет - игнорируем весь байт (считаем, что была помеха)
		  bcf	U2_IsReceive
		mov_lwf	.9,USART2_RCount	;Последует приём 9 бит (8 бит данных + стоповый)
		bcf	U2_IsRStartBit		;Следующий принимаемый бит - не стартовый
		goto	_U2R_Exit
_U2R_Next:	;Приём очередного бита
		rrf	USART2_RData,ToF	;Чтение бита и занесение его в принимаемый байт
		bcf	USART2_RData,7
		If_1	U2_RX
		  bsf	USART2_RData,7
_U2R_Exit:	;Конец приёма данных по USART2
		ENDM

;***** Макросы и передачи, и приёма по USART2 *****

;Переменная длительность передачи => максимально возможное быстродействие
U2_Intr_Fast	MACRO
		U2_Intr_T_Fast			;Передача
		U2_Intr_R			;Приём
		ENDM

;Постоянная длительность передачи => корректный приём на любых скоростях
U2_Intr_Fixed	MACRO
		U2_Intr_T_Fixed			;Передача (должна стоять первой!)
		U2_Intr_R			;Приём
		ENDM

;Длительность нахождения в макросах (в тактах):
;В U2_Intr_T_Fast:  3..17 (3 - при отсутствии передачи; до 17 - при передаче)
;В U2_Intr_T_Fixed: 17 всегда
;В U2_Intr_R:	   5..19 (5 - при отсутствии приёма; до 19 - при приёме)
;В U2_Intr_Fast:
;    При отсутствии приёма и передачи: 3+5=8 тактов
;    При приёме либо передаче: максимум 17+5=3+19=22 такта
;    При одновременных приёме и передаче: максимум 17+19=36 тактов
;В U2_Intr_Fixed:
;    При отсутствии приёма: 17+5=22 такта
;    При приёме: максимум 17+19=36 тактов

;ПРИ ИСПОЛЬЗОВАНИИ ОДНОВРЕМЕННЫХ ПРИЁМА И ПЕРЕДАЧИ:
;При использовании макроса U2_Intr_Fast приём в момент передачи будет смещён по времени (опаздывать до 14 тактов),
;что может привести к ошибкам. Поэтому необходимо вместо него использовать макрос U2_Intr_Fixed, чтобы избежать возникновения
;такого смещения и возможных ошибок приёма.

;=============================================================================
